"use strict";
var core_1 = require("@angular/core");
var Sqlite = require("nativescript-sqlite");
var ChallengeService = (function () {
    function ChallengeService() {
        var _this = this;
        if (!Sqlite.exists("examen.db")) {
            Sqlite.copyDatabase("examen.db");
        }
        (new Sqlite("examen.db")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS " +
                "challenges (id INTEGER PRIMARY KEY AUTOINCREMENT," +
                "  nom TEXT)")
                .then(function (id) {
                _this.database = db;
                _this.getAllChallenges();
            }, function (error) {
                console.log("CREATE TABLE ERROR", error);
            });
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
        (new Sqlite("examen.db")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS " +
                "challenges (id INTEGER PRIMARY KEY AUTOINCREMENT," +
                "  nom TEXT)")
                .then(function (id) {
                _this.database = db;
                _this.getAllChallenges();
            }, function (error) {
                console.log("CREATE TABLE ERROR", error);
            });
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
    }
    ChallengeService.prototype.getAllChallenges = function () {
        var _this = this;
        this.database.all("SELECT * FROM challenges").then(function (rows) {
            _this.challenges = [];
            for (var row in rows) {
                _this.challenges.push({
                    id: rows[row][0],
                    nom: rows[row][1]
                });
                console.log("id: " + rows[row][0] + "  name: " + rows[row][1]);
            }
        }, function (error) {
            console.log("SELECT ERROR", error);
        });
    };
    ChallengeService.prototype.getAllMyChallenges = function () {
        var _this = this;
        this.database.all("SELECT * FROM mesChallenges").then(function (rows) {
            _this.Mychallenges = [];
            for (var row in rows) {
                _this.challenges.push({
                    id: rows[row][0],
                    nom: rows[row][1]
                });
                console.log("id: " + rows[row][0] + "  name: " + rows[row][1]);
            }
        }, function (error) {
            console.log("SELECT ERROR", error);
        });
    };
    ChallengeService.prototype.insertChallenge = function (flight) {
        var _this = this;
        this.database.execSQL("INSERT INTO challenges (name) VALUES (?)", [flight.nom]).then(function (id) {
            console.log("INSERT RESULT", id);
            _this.getAllChallenges();
        }, function (error) {
            console.log("INSERT ERROR", error);
        });
    };
    ChallengeService.prototype.insertMyChallenge = function (flight) {
        var _this = this;
        this.database.execSQL("INSERT INTO mesChallenges (nom) VALUES (?)", [flight.nom]).then(function (id) {
            console.log("INSERT RESULT", id);
            _this.getAllChallenges();
        }, function (error) {
            console.log("INSERT ERROR", error);
        });
    };
    ChallengeService.prototype.deleteAll = function () {
        var _this = this;
        this.database.execSQL("DELETE FROM challenges").then(function (id) {
            console.log("Delete RESULT", id);
            _this.getAllChallenges();
        }, function (error) {
            console.log("Delete ERROR", error);
        });
    };
    ChallengeService.prototype.deleteOneChallenge = function (id) {
        var _this = this;
        this.database.execSQL("DELETE FROM challenges WHERE id=?", [id]).then(function (id) {
            console.log("Delete RESULT", id);
            _this.getAllChallenges();
        }, function (error) {
            console.log("Delete ERROR", error);
        });
    };
    ChallengeService.prototype.getChallenges = function () {
        this.getAllChallenges();
        return this.challenges;
    };
    ChallengeService.prototype.getMyChallenges = function () {
        this.getAllMyChallenges();
        return this.Mychallenges;
    };
    ChallengeService.prototype.getChallenge = function (id) {
        console.log("id: " + id);
        return this.challenges.filter(function (tasks) { return tasks.id == id; })[0];
    };
    ChallengeService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], ChallengeService);
    return ChallengeService;
}());
exports.ChallengeService = ChallengeService;
//# sourceMappingURL=data:application/json;base64,