"use strict";
var core_1 = require("@angular/core");
var Sqlite = require("nativescript-sqlite");
var ServiceProduct = (function () {
    function ServiceProduct() {
        var _this = this;
        (new Sqlite("my.db")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS " +
                "prods (id INTEGER PRIMARY KEY AUTOINCREMENT," +
                "  name TEXT, price INTEGER )")
                .then(function (id) {
                _this.database = db;
                _this.getAll();
            }, function (error) {
                console.log("CREATE TABLE ERROR", error);
            });
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
    }
    ServiceProduct.prototype.getAll = function () {
        var _this = this;
        this.database.all("SELECT * FROM prods").then(function (rows) {
            _this.flights = [];
            for (var row in rows) {
                _this.flights.push({
                    id: rows[row][0],
                    name: rows[row][1],
                    price: rows[row][2]
                });
                console.log("id: " + rows[row][0] + "  name: " + rows[row][1] + "  price: " + rows[row][2]);
            }
        }, function (error) {
            console.log("SELECT ERROR", error);
        });
    };
    ServiceProduct.prototype.insertFlight = function (flight) {
        var _this = this;
        this.database.execSQL("INSERT INTO prods (name, price) VALUES (?, ?)", [flight.name, flight.price]).then(function (id) {
            console.log("INSERT RESULT", id);
            _this.getAll();
        }, function (error) {
            console.log("INSERT ERROR", error);
        });
    };
    ServiceProduct.prototype.deleteAll = function () {
        var _this = this;
        this.database.execSQL("DELETE FROM prods").then(function (id) {
            console.log("Delete RESULT", id);
            _this.getAll();
        }, function (error) {
            console.log("Delete ERROR", error);
        });
    };
    ServiceProduct.prototype.deleteOneFlight = function (id) {
        var _this = this;
        this.database.execSQL("DELETE FROM prods WHERE id=?", [id]).then(function (id) {
            console.log("Delete RESULT", id);
            _this.getAll();
        }, function (error) {
            console.log("Delete ERROR", error);
        });
    };
    ServiceProduct.prototype.getFlights = function () {
        this.getAll();
        return this.flights;
    };
    ServiceProduct.prototype.getFlight = function (id) {
        return this.flights.filter(function (tasks) { return tasks.id == id; })[0];
    };
    ServiceProduct = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], ServiceProduct);
    return ServiceProduct;
}());
exports.ServiceProduct = ServiceProduct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VydmljZVByb2R1Y3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJTZXJ2aWNlUHJvZHVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEscUJBQXlCLGVBQWUsQ0FBQyxDQUFBO0FBRXpDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBRTVDO0lBSUE7UUFKQSxpQkFtRkM7UUE5RUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEVBQUU7WUFDekIsRUFBRSxDQUFDLE9BQU8sQ0FBQyw2QkFBNkI7Z0JBQ3hDLDhDQUE4QztnQkFDOUMsOEJBQThCLENBQUM7aUJBQzlCLElBQUksQ0FBQyxVQUFBLEVBQUU7Z0JBQ0osS0FBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7Z0JBRXBCLEtBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNqQixDQUFDLEVBQUUsVUFBQSxLQUFLO2dCQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDN0MsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLEVBQUUsVUFBQSxLQUFLO1lBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sK0JBQU0sR0FBYjtRQUFBLGlCQWNDO1FBYkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxJQUFJO1lBQzlDLEtBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ2xCLEdBQUcsQ0FBQSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO29CQUNoQixFQUFFLEVBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDZixJQUFJLEVBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDbkIsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3BCLENBQUMsQ0FBQztnQkFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUUsVUFBVSxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxXQUFXLEdBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFJLENBQUM7WUFDNUYsQ0FBQztRQUNMLENBQUMsRUFBRSxVQUFBLEtBQUs7WUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxxQ0FBWSxHQUFaLFVBQWEsTUFBYztRQUEzQixpQkFPQztRQU5DLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLCtDQUErQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxFQUFFO1lBQ3ZHLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ25DLEtBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNoQixDQUFDLEVBQUUsVUFBQSxLQUFLO1lBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsa0NBQVMsR0FBVDtRQUFBLGlCQVFDO1FBUEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxFQUFFO1lBQzlDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2pDLEtBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUVsQixDQUFDLEVBQUUsVUFBQSxLQUFLO1lBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsd0NBQWUsR0FBZixVQUFnQixFQUFTO1FBQXpCLGlCQVdDO1FBVkEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsOEJBQThCLEVBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEVBQUU7WUFDN0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDakMsS0FBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRWxCLENBQUMsRUFBRSxVQUFBLEtBQUs7WUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztJQUlMLENBQUM7SUFHRCxtQ0FBVSxHQUFWO1FBQ0MsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2IsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVELGtDQUFTLEdBQVQsVUFBVSxFQUFTO1FBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFBLEtBQUssSUFBRSxPQUFBLEtBQUssQ0FBQyxFQUFFLElBQUUsRUFBRSxFQUFaLENBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUE5RUQ7UUFBQyxpQkFBVSxFQUFFOztzQkFBQTtJQW9GYixxQkFBQztBQUFELENBQUMsQUFuRkQsSUFtRkM7QUFuRlksc0JBQWMsaUJBbUYxQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtQcm9kdWN0fSBmcm9tIFwiLi9Qcm9kdWl0XCJcbnZhciBTcWxpdGUgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXNxbGl0ZVwiKTtcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTZXJ2aWNlUHJvZHVjdHtcblxuZmxpZ2h0czpQcm9kdWN0W107XG5kYXRhYmFzZTphbnk7XG5jb25zdHJ1Y3Rvcigpe1xuICAobmV3IFNxbGl0ZShcIm15LmRiXCIpKS50aGVuKGRiID0+IHtcbiAgICAgIGRiLmV4ZWNTUUwoXCJDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBcIitcbiAgICAgIFwicHJvZHMgKGlkIElOVEVHRVIgUFJJTUFSWSBLRVkgQVVUT0lOQ1JFTUVOVCxcIitcbiAgICAgIFwiICBuYW1lIFRFWFQsIHByaWNlIElOVEVHRVIgKVwiKVxuICAgICAgLnRoZW4oaWQgPT4ge1xuICAgICAgICAgIHRoaXMuZGF0YWJhc2UgPSBkYjtcblxuICAgICAgICAgdGhpcy5nZXRBbGwoKTtcbiAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkNSRUFURSBUQUJMRSBFUlJPUlwiLCBlcnJvcik7XG4gICAgICB9KTtcbiAgfSwgZXJyb3IgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJPUEVOIERCIEVSUk9SXCIsIGVycm9yKTtcbiAgfSk7XG59XG5cbnB1YmxpYyBnZXRBbGwoKXtcbiAgdGhpcy5kYXRhYmFzZS5hbGwoXCJTRUxFQ1QgKiBGUk9NIHByb2RzXCIpLnRoZW4ocm93cyA9PiB7XG4gICAgICB0aGlzLmZsaWdodHMgPSBbXTtcbiAgICAgIGZvcih2YXIgcm93IGluIHJvd3MpIHtcbiAgICAgICAgICB0aGlzLmZsaWdodHMucHVzaCh7XG4gICAgICAgICAgICBpZDpyb3dzW3Jvd11bMF0gLFxuICAgICAgICAgICAgbmFtZSA6IHJvd3Nbcm93XVsxXSxcbiAgICAgICAgICAgIHByaWNlOiByb3dzW3Jvd11bMl1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImlkOiBcIisgIHJvd3Nbcm93XVswXSArXCIgIG5hbWU6IFwiK3Jvd3Nbcm93XVsxXStcIiAgcHJpY2U6IFwiK3Jvd3Nbcm93XVsyXSAgICk7XG4gICAgICB9XG4gIH0sIGVycm9yID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFwiU0VMRUNUIEVSUk9SXCIsIGVycm9yKTtcbiAgfSk7XG59XG5cbmluc2VydEZsaWdodChmbGlnaHQ6UHJvZHVjdCl7XG4gIHRoaXMuZGF0YWJhc2UuZXhlY1NRTChcIklOU0VSVCBJTlRPIHByb2RzIChuYW1lLCBwcmljZSkgVkFMVUVTICg/LCA/KVwiLCBbZmxpZ2h0Lm5hbWUsIGZsaWdodC5wcmljZV0pLnRoZW4oaWQgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJJTlNFUlQgUkVTVUxUXCIsIGlkKTtcbiAgICB0aGlzLmdldEFsbCgpO1xuICB9LCBlcnJvciA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcIklOU0VSVCBFUlJPUlwiLCBlcnJvcik7XG4gIH0pO1xufVxuXG5kZWxldGVBbGwoKXtcbiAgdGhpcy5kYXRhYmFzZS5leGVjU1FMKFwiREVMRVRFIEZST00gcHJvZHNcIikudGhlbihpZCA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcIkRlbGV0ZSBSRVNVTFRcIiwgaWQpO1xuICAgICAgdGhpcy5nZXRBbGwoKTtcblxuICB9LCBlcnJvciA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcIkRlbGV0ZSBFUlJPUlwiLCBlcnJvcik7XG4gIH0pO1xufVxuXG5kZWxldGVPbmVGbGlnaHQoaWQ6bnVtYmVyKVxue3RoaXMuZGF0YWJhc2UuZXhlY1NRTChcIkRFTEVURSBGUk9NIHByb2RzIFdIRVJFIGlkPT9cIixbaWRdKS50aGVuKGlkID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFwiRGVsZXRlIFJFU1VMVFwiLCBpZCk7XG4gICAgICB0aGlzLmdldEFsbCgpO1xuXG4gIH0sIGVycm9yID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFwiRGVsZXRlIEVSUk9SXCIsIGVycm9yKTtcbiAgfSk7XG5cblxuXG59XG5cblxuZ2V0RmxpZ2h0cygpOlByb2R1Y3RbXXtcblx0dGhpcy5nZXRBbGwoKTtcbiAgcmV0dXJuIHRoaXMuZmxpZ2h0cztcbn1cblxuZ2V0RmxpZ2h0KGlkOm51bWJlcik6UHJvZHVjdHtcbiAgcmV0dXJuIHRoaXMuZmxpZ2h0cy5maWx0ZXIodGFza3M9PnRhc2tzLmlkPT1pZClbMF07XG59XG5cblxuXG5cblxufVxuIl19